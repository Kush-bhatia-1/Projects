-- Query Data
USE coffee_shop; 

-- Testing to look at the different tables
DESCRIBE customers;
DESCRIBE staff;
DESCRIBE sales_outlets;
DESCRIBE sales;
DESCRIBE products;
DESCRIBE inventory;
SELECT * FROM products;
SELECT product_name FROM products;

-- Q1: Identify the top 5 most profitable customers based on their total spending. Include customer details and total spending.
SELECT c.customer_id, c.customer_first_name, customer_email, customer_since, SUM(s.line_item_amount) AS total_spending
FROM customers AS c
-- Joining customers and sales tables based on customer ID
JOIN sales AS s ON c.customer_id = s.customer_id
GROUP BY c.customer_id, c.customer_first_name
ORDER BY total_spending DESC
LIMIT 5;

-- Q2: Identify top 5 products, for store #3, that are most frequently purchased in higher quantities (>1).
SELECT p.product_id, p.product_name, p.product_category, COUNT(s.line_item_id) AS purchased
FROM products AS p
-- Joining products and sales tables based on product ID
JOIN sales AS s ON p.product_id = s.product_id
-- Filtering for transactions at store #3 with quantities that are greater than 1
WHERE s.sales_outlet_id = 3 AND s.quantity > 1
GROUP BY p.product_id, p.product_name
ORDER BY purchased DESC
LIMIT 5;

-- Q3: Identify the least profitable 5 products (in terms of revenue) for store #5. Include product name and category, as well as the total revenue.
SELECT p.product_id, p.product_name, p.product_category, SUM(s.line_item_amount) AS total_revenue
FROM products AS p
-- Joining products and sales tables based on product ID
JOIN sales AS s ON p.product_id = s.product_id
-- Filtering for transactions at store #5
WHERE s.sales_outlet_id = 5
GROUP BY p.product_id, p.product_name
ORDER BY total_revenue ASC
LIMIT 5;

-- Q4: Evaluate staff performance for store #8 by calculating the total revenue generated by each staff member. 
SELECT st.staff_id, st.first_name, st.last_name, SUM(s.line_item_amount) AS total_revenue
FROM staff AS st
-- Joining staff and sales tables based on staff ID
JOIN sales AS s ON st.staff_id = s.staff_id
-- Joining sales and sales_outlets tables based on sales outlet ID
JOIN sales_outlets AS so ON s.sales_outlet_id = so.sales_outlet_id
-- Filtering for transactions at store #8
WHERE so.sales_outlet_id = 8
GROUP BY st.staff_id, st.first_name, st.last_name
ORDER BY total_revenue DESC;


-- Q5: For BTBT, which product has the highest waste (in terms of total cost)?
SELECT p.product_id, p.product_name, p.product_type, SUM(i.waste * p.current_wholesale_price) AS total_waste_cost
FROM products as p
-- Joining products and inventory tables based on product ID
JOIN inventory AS i ON i.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_waste_cost DESC
LIMIT 1; 

















